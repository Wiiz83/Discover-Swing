/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tp5;

import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

/**
 *
 * @author uzanl
 */
public class Launcher extends javax.swing.JFrame {

    enum Etat {Init, NoDown, UpDown, NoUp, TextField, PieChart};
    Etat etatCourant;
    
    int valeur;
    Model model = new Model(0);
    
    public Launcher() {
        initComponents();
        this.etatCourant = Etat.Init;
        this.presentationInit();
        model.addView(this.myTextField);
        model.addView(this.pieChart);
        
        pieChart.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            @Override
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                pieChartMouseDragged(evt);
            }
        });
        
        pieChart.addMouseListener(new MouseAdapter(){
           @Override
           public void mousePressed(java.awt.event.MouseEvent evt) {
                pieChartMousePressed(evt);
            }
           @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                pieChartMouseReleased(evt);
            }
        });
        
        myTextField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent evt){
                myTextFieldKeyPressed(evt);
            }
        });
        
        myTextField.addFocusListener(new FocusAdapter(){
            @Override
            public void focusGained(FocusEvent evt){
                myTextFieldFocusGained(evt);
            }
        });
        
        
    }

    private void presentationInit(){
        this.jButtonStart.setEnabled(true);
        this.jButtonStop.setEnabled(false);
        this.jButtonDown.setEnabled(false);
        this.jButtonUp.setEnabled(false);
        this.myTextField.setEnabled(false);
    }
    
    private void presentationNoDown(){
        this.jButtonStart.setEnabled(false);
        this.jButtonStop.setEnabled(true);
        this.jButtonDown.setEnabled(false);
        this.jButtonUp.setEnabled(true);
        this.myTextField.setEnabled(true);
    }
    
    private void presentationUpDown(){
        this.jButtonStart.setEnabled(false);
        this.jButtonStop.setEnabled(true);
        this.jButtonDown.setEnabled(true);
        this.jButtonUp.setEnabled(true);
        this.myTextField.setEnabled(true);
    }
    private void presentationNoUp(){
        this.jButtonStart.setEnabled(false);
        this.jButtonStop.setEnabled(true);
        this.jButtonDown.setEnabled(true);
        this.jButtonUp.setEnabled(false);
        this.myTextField.setEnabled(true);
    }
    private void presentationTextField(){
        this.jButtonStart.setEnabled(false);
        this.jButtonStop.setEnabled(false);
        this.jButtonDown.setEnabled(false);
        this.jButtonUp.setEnabled(false);
        this.myTextField.setEnabled(true);
        this.pieChart.setEnabled(false);
    }
    private void presentationPieChart(){
        this.jButtonStart.setEnabled(false);
        this.jButtonStop.setEnabled(false);
        this.jButtonDown.setEnabled(false);
        this.jButtonUp.setEnabled(false);
        this.myTextField.setEnabled(false);
        this.pieChart.setEnabled(true);
    }
    
    private void initValeur(){
        this.valeur = 0;
        this.model.setValue(this.valeur);
    }
    
    private void incValeur(){
        this.valeur++;
    }
    
    private void decValeur(){
        this.valeur--;
    }
    
    private boolean ValidateString(String s){
        boolean validate = false;
        
        // si que chiffres
        if(s.matches("[0-9]+")){
            int i = Integer.parseInt(s);
            
            // si dans l'intervalle [0, 100]
            if(i >= 0 && i <= 100){
                validate = true;
            }
        }

        return validate;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonStart = new javax.swing.JButton();
        jButtonStop = new javax.swing.JButton();
        jButtonUp = new javax.swing.JButton();
        jButtonDown = new javax.swing.JButton();
        pieChart = new tp5.PieChart();
        myTextField = new tp5.MyTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(java.awt.Color.white);
        setResizable(false);

        jButtonStart.setText("START");
        jButtonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartActionPerformed(evt);
            }
        });

        jButtonStop.setText("STOP");
        jButtonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStopActionPerformed(evt);
            }
        });

        jButtonUp.setText("UP");
        jButtonUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpActionPerformed(evt);
            }
        });

        jButtonDown.setText("DOWN");
        jButtonDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDownActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pieChartLayout = new javax.swing.GroupLayout(pieChart);
        pieChart.setLayout(pieChartLayout);
        pieChartLayout.setHorizontalGroup(
            pieChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 201, Short.MAX_VALUE)
        );
        pieChartLayout.setVerticalGroup(
            pieChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel1.setText("%");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pieChart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(myTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addGap(74, 74, 74)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonStop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonStart, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonDown, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonUp, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pieChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(52, 52, 52))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButtonUp, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonDown, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jButtonStart, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonStop, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(myTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Clic sur le bouton "Up" pour incrementer le pourcentage 
    private void jButtonUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpActionPerformed
        switch(etatCourant){
            case Init :
                //interdit
                break;
            case NoDown : 
                this.etatCourant = Etat.UpDown;
                this.presentationUpDown();
                this.incValeur();
                this.model.setValue(this.valeur);
                break;
            case UpDown :
                this.incValeur();
                this.model.setValue(this.valeur);
                if (valeur == 100) {
                    this.requestFocus();
                   this.etatCourant = Etat.NoUp;
                   this.presentationNoUp();
                } else {
                    this.etatCourant = Etat.UpDown;
                    this.presentationUpDown();
                }
                break;
            case NoUp :
                // interdit 
                break;
            case TextField :
                // interdit
                break;
            case PieChart :
                // interdit
                break;
                
        }
    }//GEN-LAST:event_jButtonUpActionPerformed

    private void jButtonDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDownActionPerformed
        switch(etatCourant){
            case Init :
                // interdit
                break;
            case NoDown :
                // interdit
                break;
            case UpDown :
                this.decValeur();
                this.model.setValue(valeur);
                if(valeur == 0){
                    this.requestFocus();
                    this.etatCourant = Etat.NoDown;
                    this.presentationNoDown();
                } else {
                    this.etatCourant = Etat.UpDown;
                    this.presentationUpDown();
                }
                break;
            case NoUp :
                decValeur();
                this.model.setValue(valeur);
                this.etatCourant = Etat.UpDown;
                presentationUpDown();
                break;
            case TextField :
                // interdit
                break;
            case PieChart :
                // interdit
                break;
                
        }
    }//GEN-LAST:event_jButtonDownActionPerformed

    private void jButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartActionPerformed
        switch(etatCourant){
            case Init :
                this.etatCourant = Etat.NoDown;
                presentationNoDown();
                break;
            case NoDown : 
                this.etatCourant = Etat.NoDown;
                presentationNoDown();
                break;
            case UpDown :
                this.etatCourant = Etat.NoDown;
                presentationNoDown();
                break;
            case NoUp :
                this.etatCourant = Etat.NoDown;
                presentationNoDown();
                break;
            case TextField :
                this.etatCourant = Etat.NoDown;
                presentationNoDown();
                break;
            case PieChart :
                this.etatCourant = Etat.NoDown;
                presentationNoDown();
                break;
                
        }
    }//GEN-LAST:event_jButtonStartActionPerformed

    private void jButtonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStopActionPerformed
        switch(etatCourant){
            case Init :
                this.etatCourant = Etat.Init;
                presentationInit();
                initValeur();
                break;
            case NoDown : 
                this.etatCourant = Etat.Init;
                presentationInit();
                initValeur();
                break;
            case UpDown :
                this.etatCourant = Etat.Init;
                presentationInit();
                initValeur();
                break;
            case NoUp :
                this.etatCourant = Etat.Init;
                presentationInit();
                initValeur();
                break;
            case TextField :
                this.etatCourant = Etat.Init;
                presentationInit();
                initValeur();
                break;
            case PieChart :
                this.etatCourant = Etat.Init;
                presentationInit();
                initValeur();
                break;
                
        }
    }//GEN-LAST:event_jButtonStopActionPerformed

    
    private void pieChartMouseDragged(MouseEvent evt){
        switch(etatCourant){
            case Init :
                // interdit 
                break;
            case NoDown : 
                // interdit 
                break;
            case UpDown :
                // interdit 
                break;
            case NoUp :
                // interdit 
                break;
            case TextField :
                // interdit 
                break;
            case PieChart :
                this.valeur = UtilitiesPieChart.pointToPercentage(pieChart, evt.getX(), evt.getY());
                this.model.setValue(valeur);
                break;
                
        }
    }
    
    private void pieChartMousePressed(MouseEvent evt){
        switch(etatCourant){
            case Init :
                // interdit 
                break;
            case NoDown : 
                this.etatCourant = Etat.PieChart;
                presentationPieChart();
                break;
            case UpDown :
                this.etatCourant = Etat.PieChart;
                presentationPieChart();
                break;
            case NoUp :
                this.etatCourant = Etat.PieChart;
                presentationPieChart();
                break;
            case TextField :
                // interdit 
                break;
            case PieChart :
                // interdit 
                break;
        }
    }
    
    private void pieChartMouseReleased(MouseEvent evt){
        switch(etatCourant){
            case Init :
                // interdit 
                break;
            case NoDown : 
                // interdit 
                break;
            case UpDown :
                // interdit 
                break;
            case NoUp :
                // interdit 
                break;
            case TextField :
                // impossible              
                break;
            case PieChart :
                if(this.valeur == 0){
                    this.etatCourant = Etat.NoDown;
                    presentationNoDown();
                } else if (this.valeur == 100){
                    this.etatCourant = Etat.NoUp;
                    presentationNoUp();
                } else {
                    this.etatCourant = Etat.UpDown;
                    presentationUpDown();
                }  
                break;   
        }
    }
    
    private void myTextFieldFocusGained(FocusEvent evt){
        switch(etatCourant){
            case Init :
                // interdit 
                break;
            case NoDown : 
                this.etatCourant = Etat.TextField;
                presentationTextField();
                break;
            case UpDown :
                this.etatCourant = Etat.TextField;
                presentationTextField();
                break;
            case NoUp :
                this.etatCourant = Etat.TextField;
                presentationTextField();
                break;
            case TextField :
                // interdit              
                break;
            case PieChart :
                // interdit
                break;   
        }
    }
    
    private void myTextFieldKeyPressed(KeyEvent evt){
        switch(etatCourant){
            case Init :
                // interdit 
                break;
            case NoDown : 
                // interdit 
                break;
            case UpDown :
                // interdit 
                break;
            case NoUp :
                // interdit 
                break;
            case TextField :
                if(ValidateString(this.myTextField.getText()) == true){
                    if(evt.getKeyCode() == KeyEvent.VK_ENTER){
                        this.valeur = Integer.parseInt(this.myTextField.getText());
                        this.model.setValue(valeur);
                        this.requestFocus();
                        if(this.valeur == 0){
                            this.etatCourant = Etat.NoDown;
                            presentationNoDown();
                        } else if (this.valeur == 100){
                            this.etatCourant = Etat.NoUp;
                            presentationNoUp();
                        } else {
                            this.etatCourant = Etat.UpDown;
                            presentationUpDown();
                        }  
                    }    
                }      
                break;
            case PieChart :
                // interdit
                break;   
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Launcher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Launcher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Launcher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Launcher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Launcher().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDown;
    private javax.swing.JButton jButtonStart;
    private javax.swing.JButton jButtonStop;
    private javax.swing.JButton jButtonUp;
    private javax.swing.JLabel jLabel1;
    private tp5.MyTextField myTextField;
    private tp5.PieChart pieChart;
    // End of variables declaration//GEN-END:variables
}
