/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tp4.ex2;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.util.ArrayList;

/**
 *
 * @author uzanl
 */
public class AireDeDessin extends javax.swing.JPanel {
    
    private static class Ligne {
        final int x1; 
        final int y1;
        final int x2;
        final int y2;   
        final Color color;

        public Ligne(int x1, int y1, int x2, int y2, Color color) {
            this.x1 = x1;
            this.y1 = y1;
            this.x2 = x2;
            this.y2 = y2;
            this.color = color;
        }               
    }

    private final ArrayList<Ligne> lignes = new ArrayList<Ligne>();
    
    BufferedImage mon_image;
    Graphics2D graphic;
    Point origin;
    int width;
    int height;
    Ligne ligneEnCours;
    boolean drawFirstPoint;
    boolean drawEndPoint;

    public AireDeDessin() {
        mon_image = null;
        origin = null;
        drawFirstPoint = true;
        drawEndPoint = false;
    }
    
    public void lineStart(Point p) {
        if(drawFirstPoint == true){
            origin = p;  // on fait le premier point de la figure et donc de la première ligne
            drawFirstPoint = false;
        } else {
            origin = new Point(ligneEnCours.x2, ligneEnCours.y2); // le point de la fin de la dernière ligne
        }

    }

    public void linePreview(Point p) {
        ligneEnCours = new Ligne(origin.x, origin.y, p.x, p.y, Color.black);
        graphic.setPaint(Color.white);
        graphic.fillRect(p.x, p.y, 10, 10);
        repaint();
    }
    
    public void lineFinish(){
        lignes.add(this.ligneEnCours);        
        repaint();
    }
    
    public void drawFinish(){
        drawFirstPoint = true;
    }
    
    // Un clic droit enlève le dernier point ajouté (excepté le cas où il n’y a qu’un point)
    public void efface() {
        if(drawFirstPoint == false){
            Ligne derniereLigne = lignes.get(lignes.size() - 1);
            origin = new Point(derniereLigne.x1, derniereLigne.y1);
            lignes.remove(lignes.size() - 1);
            repaint();
        }
    }
    
    //on efface tout
    public void nouveau() {
        width = getSize().width;
        height = getSize().height;
    	
        mon_image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        graphic = mon_image.createGraphics();
        
        graphic.setPaint(Color.white);
        graphic.fillRect(0, 0, width, height);
        
        repaint();
    }
    
    // on redimmensionne // ne fonctionne pas correctement car efface les dessins
    public void redimensionnement(Dimension d){
       	width = (int) d.getWidth();
        height = (int) d.getHeight();
    	
        mon_image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        graphic = mon_image.createGraphics();
        
        graphic.setPaint(Color.white);
        graphic.fillRect(0, 0, width, height);
        graphic.setPaint(Color.black);
    }
    

    @Override
    public void paintComponent(Graphics g) {
        Graphics2D drawable = (Graphics2D) g;

        // On reccupere quelques infos
        int width = getSize().width;
        int height = getSize().height;

        // on efface tout les dessins
        mon_image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        graphic = mon_image.createGraphics();
        graphic.setPaint(Color.white);
        graphic.fillRect(0, 0, width, height);
        graphic.setPaint(Color.black);
       
        // on redessinne la ligne en cours de prévisualisation 
        if(ligneEnCours != null){
            graphic.setColor(ligneEnCours.color);
            graphic.drawLine(ligneEnCours.x1, ligneEnCours.y1, ligneEnCours.x2, ligneEnCours.y2);
        }

        // et toutes les lignes terminées
        for(Ligne line : lignes) {
            graphic.setColor(line.color);
            graphic.drawLine(line.x1, line.y1, line.x2, line.y2);
        }

        drawable.drawImage(mon_image, 0, 0, null);
    }
/*
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     *//*
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
